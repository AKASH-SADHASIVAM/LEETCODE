//Approch 1

class Solution {
public:
    bool canConstruct(string r, string mag) {
         int ans[26]={0};
       // for(auto v:ans) cout<<v<<" ";
        int m=r.size();
        int n=mag.size();
        int i=0;
        int j=0;
        while(m || n){
            if(m){
              
                ans[r[i]-97]++;
                cout<<ans[r[i]-97]<<" ";
                i++;
                m--;
            }
            if(n){
               
                ans[mag[j]-97]--;
                
                j++;
                n--;
            }
        }
        for(int i=0;i<r.size();i++){
            if(ans[r[i]-97]<=0){
                continue;
            }
            return false;
        }
        
        return true;
    }
};


//approach 2
class Solution {
public:
    bool canConstruct(string x, string y) {
        int n=x.size(),m=y.size();
        string s;
        sort(x.begin(),x.end());
        sort(y.begin(),y.end());
        int dp[n+1][m+1];
        for(int i=0;i<=n;i++)dp[i][0]=0;
        for(int i=0;i<=m;i++)dp[0][i]=0;
        for(int i=1;i<=n;i++){
            for(int j=1;j<=m;j++){
                if(x[i-1]==y[j-1])dp[i][j]=1+dp[i-1][j-1];
                else {
                    dp[i][j]=max(dp[i][j-1],dp[i-1][j]);
                }
            }
        }
        return (dp[n][m]==n);

    }
};
